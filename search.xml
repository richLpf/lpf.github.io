<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang使用gin搭建项目（2）</title>
      <link href="/lpf.github.io/2020/05/06/golang%E4%BD%BF%E7%94%A8gin%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%882%EF%BC%89/"/>
      <url>/lpf.github.io/2020/05/06/golang%E4%BD%BF%E7%94%A8gin%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这一节，我们继续对项目进行改造，引入数据库，配置，文档等。</p><h2 id="一、引入数据库交互"><a href="#一、引入数据库交互" class="headerlink" title="一、引入数据库交互"></a>一、引入数据库交互</h2><p>这里我们引入mysql,使用了gorm，操作数据库</p><p>新建<code>dbs/mysql.go</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package dbs</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/jinzhu/gorm&quot;</span><br><span class="line">//mysql driver</span><br><span class="line">_ &quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">//DB 数据库</span><br><span class="line">DB  *gorm.DB</span><br><span class="line">err error</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//User 用户表</span><br><span class="line">type User struct &#123;</span><br><span class="line">ID        int       `gorm:&quot;primary_key&quot; json:&quot;id&quot;`</span><br><span class="line">Username  string    `json:&quot;Username&quot;`</span><br><span class="line">Password  string    `json:&quot;Password&quot;`</span><br><span class="line">CreatedBy string    `json:&quot;created_by&quot;`</span><br><span class="line">UpdatedAt time.Time `json:&quot;updated_at&quot;`</span><br><span class="line">CreatedAt time.Time `json:&quot;created_at&quot;`</span><br><span class="line">IsDeleted uint      `json:&quot;is_deleted&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">//本地启动了3306的数据库</span><br><span class="line">DB, err = gorm.Open(&quot;mysql&quot;, &quot;root:123456@tcp(localhost:3306)/web?charset=utf8&amp;parseTime=True&amp;loc=Local&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">DB.SingularTable(true)                                             // 创建表不会默认变成复数</span><br><span class="line">DB.Set(&quot;gorm:table_options&quot;, &quot;ENGINE=InnoDB&quot;).AutoMigrate(&amp;User&#123;&#125;) //自动迁移数据库</span><br><span class="line">fmt.Println(&quot;db&quot;, DB)</span><br><span class="line">DB.DB().Ping()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将连接数据库操作的方法放在init中，启动服务时，会首先尝试连接数据库。除了连接数据库，这里增加了自动迁移数据库，不用再一个个创建，只要写好模型，就可以自动生成数据表。</p><p>此时main.go变成了<code>cat main.go</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">_ &quot;myapp/dbs&quot;</span><br><span class="line">&quot;myapp/router&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">apiRouter := router.Router()</span><br><span class="line">apiRouter.Run(&quot;:9000&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里仅仅增加了 <code>_ &quot;myapp/dbs&quot;</code> 因为仅仅需要调用dbs包的init方法，会自动执行</p><p>这样我们就可以和数据库进行数据交互，</p><p>（1）但如果有很多表的话，岂不是要这个文件很大，我们创建model包，将所有的model统一管理，需要的时候调用就可以了。</p><p>（2）实际开发项目中，常常有多个环境，通常最少要有开发环境和生产环境，那么我们每次都需要去改数据库连接的代码，明显不合理的。所有我们接着引入下面的配置文件</p><h2 id="二、引入ini配置文件"><a href="#二、引入ini配置文件" class="headerlink" title="二、引入ini配置文件"></a>二、引入ini配置文件</h2><p>这里我使用的配置文件是ini，其他的也是一样的</p><p>新建config文件夹，文件夹下新增<code>config.go</code> <code>dev.ini</code> <code>prod.ini</code></p><p><code>cat config.go</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package config</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;gopkg.in/ini.v1&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//App 参数</span><br><span class="line">type App struct &#123;</span><br><span class="line">Mode string</span><br><span class="line">Port string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Mysql 参数</span><br><span class="line">type Mysql struct &#123;</span><br><span class="line">User     string</span><br><span class="line">Host     string</span><br><span class="line">Port     string</span><br><span class="line">Password string</span><br><span class="line">Database string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//IniParser struct</span><br><span class="line">type IniParser struct &#123;</span><br><span class="line">confReader *ini.File</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//IniParseError struct</span><br><span class="line">type IniParseError struct &#123;</span><br><span class="line">errorInfo string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *IniParseError) Error() string &#123; return e.errorInfo &#125;</span><br><span class="line"></span><br><span class="line">//Load read ini</span><br><span class="line">func (s *IniParser) Load(configFileName string) error &#123;</span><br><span class="line">conf, err := ini.Load(configFileName)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">s.confReader = nil</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">s.confReader = conf</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//GetString ini string</span><br><span class="line">func (s *IniParser) GetString(section string, key string) string &#123;</span><br><span class="line">if s.confReader == nil &#123;</span><br><span class="line">return &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">r := s.confReader.Section(section)</span><br><span class="line">if r == nil &#123;</span><br><span class="line">return &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">return r.Key(key).String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cat dev.ini</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[app]</span><br><span class="line">mode = &quot;dev&quot;</span><br><span class="line">port = &quot;:9000&quot;</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">user = &quot;root&quot;</span><br><span class="line">host = &quot;localhost&quot;</span><br><span class="line">port = &quot;3306&quot;</span><br><span class="line">password = &quot;123456&quot;</span><br><span class="line">database = &quot;web&quot;</span><br></pre></td></tr></table></figure><p>这个是配置文件，不同的服务环境</p><p>接着我们新建 <code>application</code> 夹，在这个包中判断服务的环境，并判断需要选择哪个环境</p><p><code>cat run.go</code> 其中分别获取了服务的配置信息和数据库的配置信息，</p><p>在Run函数中，判断当前环境，如果是生产环境，则读取prod.ini </p><p>如果是开发环境则读取dev.ini配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package application</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;flag&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;myapp/config&quot;</span><br><span class="line">&quot;myapp/dbs&quot;</span><br><span class="line">apiRouter &quot;myapp/router&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//Run 启动app</span><br><span class="line">func Run() &#123;</span><br><span class="line">mode := flag.String(&quot;mode&quot;, &quot;dev&quot;, &quot;eventment&quot;)</span><br><span class="line">flag.Parse()</span><br><span class="line">mysql, err := getMysql(*mode)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">dbs.RunMysql(mysql)</span><br><span class="line">app, err := getApp(*mode)</span><br><span class="line">fmt.Println(&quot;app&quot;, app)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">router := apiRouter.Router(app)</span><br><span class="line">router.Run(app.Port)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func readIni(mode string) (iniParser config.IniParser, err error) &#123;</span><br><span class="line">confFileName := &quot;dev.ini&quot;</span><br><span class="line">if mode == &quot;prod&quot; &#123;</span><br><span class="line">confFileName = &quot;prod.ini&quot;</span><br><span class="line">&#125;</span><br><span class="line">//iniParser = conf.IniParser&#123;&#125;</span><br><span class="line">dir, _ := os.Getwd()</span><br><span class="line">pathName := dir + `/config/` + confFileName</span><br><span class="line">err = iniParser.Load(pathName)</span><br><span class="line">return iniParser, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getApp(mode string) (app config.App, err error) &#123;</span><br><span class="line">iniParser, err := readIni(mode)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return app, err</span><br><span class="line">&#125;</span><br><span class="line">app = config.App&#123;</span><br><span class="line">Mode: mode,</span><br><span class="line">Port: iniParser.GetString(&quot;app&quot;, &quot;port&quot;),</span><br><span class="line">&#125;</span><br><span class="line">return app, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getMysql(mode string) (mysql config.Mysql, err error) &#123;</span><br><span class="line">iniParser, err := readIni(mode)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return mysql, err</span><br><span class="line">&#125;</span><br><span class="line">mysql = config.Mysql&#123;</span><br><span class="line">User:     iniParser.GetString(&quot;mysql&quot;, &quot;user&quot;),</span><br><span class="line">Password: iniParser.GetString(&quot;mysql&quot;, &quot;password&quot;),</span><br><span class="line">Host:     iniParser.GetString(&quot;mysql&quot;, &quot;host&quot;),</span><br><span class="line">Port:     iniParser.GetString(&quot;mysql&quot;, &quot;port&quot;),</span><br><span class="line">Database: iniParser.GetString(&quot;mysql&quot;, &quot;database&quot;),</span><br><span class="line">&#125;</span><br><span class="line">return mysql, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、引入swagger文档"><a href="#三、引入swagger文档" class="headerlink" title="三、引入swagger文档"></a>三、引入swagger文档</h2><p>在router中引入swagger <code>cat swagger</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package router</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;myapp/config&quot;</span><br><span class="line">&quot;myapp/controller/passage&quot;</span><br><span class="line">&quot;myapp/controller/user&quot;</span><br><span class="line">&quot;myapp/middleware&quot;</span><br><span class="line"></span><br><span class="line">//docs</span><br><span class="line">_ &quot;myapp/docs&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">swaggerFiles &quot;github.com/swaggo/files&quot;</span><br><span class="line">ginSwagger &quot;github.com/swaggo/gin-swagger&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//Router 路由</span><br><span class="line">func Router(app config.App) *gin.Engine &#123;</span><br><span class="line">router := gin.New()</span><br><span class="line">// 使用中间件</span><br><span class="line">// 使用Logger中间件</span><br><span class="line">router.Use(gin.Logger())</span><br><span class="line">// 使用Recovery中间件</span><br><span class="line">router.Use(gin.Recovery())</span><br><span class="line"></span><br><span class="line">if app.Mode == &quot;prod&quot; &#123;</span><br><span class="line">gin.SetMode(gin.ReleaseMode)</span><br><span class="line">&#125;</span><br><span class="line">router.Use(middleware.Cors())</span><br><span class="line"></span><br><span class="line">router.GET(&quot;/swagger/*any&quot;, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class="line">userRouter := router.Group(&quot;/user&quot;)</span><br><span class="line">userRouter.GET(&quot;list&quot;, user.GetUserList)</span><br><span class="line">userRouter.GET(&quot;detail/:id&quot;, user.GetDetail)</span><br><span class="line"></span><br><span class="line">passageRouter := router.Group(&quot;/passage&quot;)</span><br><span class="line">passageRouter.GET(&quot;list&quot;, passage.GetPassageList)</span><br><span class="line">passageRouter.POST(&quot;add&quot;, passage.AddPassage)</span><br><span class="line"></span><br><span class="line">return router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cat main.go</code><br>在main.go中，通过下面的注释，来生成文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;myapp/application&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// @title Swagger Example API</span><br><span class="line">// @version 1.0</span><br><span class="line">// @description This is a sample server Petstore server.</span><br><span class="line"></span><br><span class="line">// @contact.name API Support</span><br><span class="line">// @contact.url http://www.swagger.io/support</span><br><span class="line">// @contact.email support@swagger.io</span><br><span class="line"></span><br><span class="line">// @host localhost:9000</span><br><span class="line">// @BasePath /</span><br><span class="line">func main() &#123;</span><br><span class="line">application.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在controller文件下，passage.go中，添加注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package passage</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//GetPassageList get passage</span><br><span class="line">// List godoc</span><br><span class="line">// @Summary 列表实例</span><br><span class="line">// @Description 描述信息</span><br><span class="line">// @Tags 类别</span><br><span class="line">// @Accept json</span><br><span class="line">// @Produce json</span><br><span class="line">// @Param limit query string false  &quot;20&quot;</span><br><span class="line">// @Param offset query string false  &quot;0&quot;</span><br><span class="line">// @Success 200 &#123;string&#125; string &quot;ok&quot;</span><br><span class="line">// @Router /ucloud/list [get]</span><br><span class="line">func GetPassageList(c *gin.Context) &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;&quot;RetCode&quot;: 0, &quot;Msg&quot;: &quot;success&quot;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// AddPassage update passage</span><br><span class="line">// AddUser godoc</span><br><span class="line">// @Summary 添加文章</span><br><span class="line">// @Description 添加文章</span><br><span class="line">// @Tags 类别</span><br><span class="line">// @Accept json</span><br><span class="line">// @Produce json</span><br><span class="line">// @Param body body model.Passage true  &quot;请求参数&quot;</span><br><span class="line">// @Success 200 &#123;string&#125; string &quot;ok&quot;</span><br><span class="line">// @Router /passage/add [post]</span><br><span class="line">func AddPassage(c *gin.Context) &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;&quot;RetCode&quot;: 0, &quot;Msg&quot;: &quot;success&quot;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令行 <code>swag init</code>  会生成docs文件夹</p><p>当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">|-application             服务相关的逻辑</span><br><span class="line">|   |--run.go</span><br><span class="line">|-common                  公用函数</span><br><span class="line">|   |--utils.go</span><br><span class="line">|   |--request.go</span><br><span class="line">|-config                  配置</span><br><span class="line">|-dbs                     加载数据库</span><br><span class="line">|-docs                    swagger生成文档</span><br><span class="line">|-middleware              中间件</span><br><span class="line">|-model                   模型</span><br><span class="line">|-controller              控制器</span><br><span class="line">|   |--user               用户相关接口</span><br><span class="line">|     |--user.go</span><br><span class="line">|   |--passage            文章相关接口</span><br><span class="line">|     |--passage.go</span><br><span class="line">|-router                  路由文件</span><br><span class="line">|   |--router.go  </span><br><span class="line">|—go.mod                  mod管理器</span><br><span class="line">|—go.sum                  自动生成记录包的版本</span><br><span class="line">|—main.go                 main包，入口文件</span><br></pre></td></tr></table></figure><p>打开<code>http://localhost:9000/swagger/index.html</code> 即可看到接口文档</p><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fswagger.png" alt="swagger文档"></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql ini swagger golang gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang使用gin框架搭建工作项目（1）</title>
      <link href="/lpf.github.io/2020/05/05/golang%E4%BD%BF%E7%94%A8gin%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE/"/>
      <url>/lpf.github.io/2020/05/05/golang%E4%BD%BF%E7%94%A8gin%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E5%B7%A5%E4%BD%9C%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="从零搭建一个go项目"><a href="#从零搭建一个go项目" class="headerlink" title="从零搭建一个go项目"></a>从零搭建一个go项目</h2><p>涉及到的技术</p><p>gin  mysql  gorm  swagger  docker shell</p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>1、通过环境变量配置不同的打包环境</p><p>2、打包镜像实现自动化打包，版本的记录和回退</p><p>3、通过组织代码，将代码的分层</p><p>4、引入mod包管理工具</p><p>5、通过swagger自动生成文档</p><h2 id="一、新建一个go文件"><a href="#一、新建一个go文件" class="headerlink" title="一、新建一个go文件"></a>一、新建一个go文件</h2><p>新建文件夹<br><code>mkdir myapp</code></p><p>使用mod版本管理<br><code>go mod init myapp</code> 自动生成go.mod文件</p><p><em>注意</em> golang 安装后默认环境变量 GO111MODULE=auto, 如果需要使用mod管理包，需要设置<code>GO111MODULE=on</code></p><p><code>go get github.com/gin-gonic/gin</code> 下载gin包，mod会自动记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(&quot;/list&quot;, GetUserList)</span><br><span class="line">router.GET(&quot;/detail/:id&quot;, GetDetail)</span><br><span class="line">router.Run(&quot;:9001&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//GetUserList get user</span><br><span class="line">func GetUserList(c *gin.Context) &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;&quot;RetCode&quot;: 0, &quot;Msg&quot;: &quot;success&quot;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//GetDetail update user</span><br><span class="line">func GetDetail(c *gin.Context) &#123;</span><br><span class="line">id := c.Param(&quot;id&quot;)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;&quot;RetCode&quot;: 0, &quot;Msg&quot;: &quot;success&quot;, &quot;Id&quot;: id&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个main包，此时我们还没有引入数据库和其他的一些配置，但实际工作中，我们不可能用一个包来写所有的代码,所以接下来我们用controller目录来将请求的接口整理</p><h2 id="二、将请求的函数放在controller中"><a href="#二、将请求的函数放在controller中" class="headerlink" title="二、将请求的函数放在controller中"></a>二、将请求的函数放在controller中</h2><p>新建<code>controller/user/user.go</code></p><p><code>cat user.go</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package user</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//GetUserList get user</span><br><span class="line">func GetUserList(c *gin.Context) &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;&quot;RetCode&quot;: 0, &quot;Msg&quot;: &quot;success&quot;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//GetDetail update user</span><br><span class="line">func GetDetail(c *gin.Context) &#123;</span><br><span class="line">id := c.Param(&quot;id&quot;)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;&quot;RetCode&quot;: 0, &quot;Msg&quot;: &quot;success&quot;, &quot;Id&quot;: id&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>cat main.go</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;myapp/controller/user&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(&quot;/list&quot;, user.GetUserList)</span><br><span class="line">router.GET(&quot;/detail/:id&quot;, user.GetDetail)</span><br><span class="line">router.Run(&quot;:9001&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过引入user包，将user中的方法引入</p><p>当前目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├─controller              控制器</span><br><span class="line">│   |--user               用户相关接口</span><br><span class="line">|     |--user.go</span><br><span class="line">|—go.mod                  mod管理器</span><br><span class="line">|—go.sum                  自动生成记录包的版本</span><br><span class="line">|—main.go                 main包，入口文件</span><br></pre></td></tr></table></figure><p>之后新增的业务接口，统一放在controller中</p><h2 id="三、将路由分离出来单独维护"><a href="#三、将路由分离出来单独维护" class="headerlink" title="三、将路由分离出来单独维护"></a>三、将路由分离出来单独维护</h2><p>新建 <code>router/router.go</code></p><p><code>cat router.go</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package router</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;myapp/controller/passage&quot;</span><br><span class="line">&quot;myapp/controller/user&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//Router 路由</span><br><span class="line">func Router() *gin.Engine &#123;</span><br><span class="line">router := gin.New()</span><br><span class="line">// 使用中间件</span><br><span class="line">// 使用Logger中间件</span><br><span class="line">router.Use(gin.Logger())</span><br><span class="line">// 使用Recovery中间件</span><br><span class="line">router.Use(gin.Recovery())</span><br><span class="line"></span><br><span class="line">userRouter := router.Group(&quot;/user&quot;)</span><br><span class="line">userRouter.GET(&quot;list&quot;, user.GetUserList)</span><br><span class="line">userRouter.GET(&quot;detail/:id&quot;, user.GetDetail)</span><br><span class="line"></span><br><span class="line">passageRouter := router.Group(&quot;/passage&quot;)</span><br><span class="line">passageRouter.GET(&quot;list&quot;, passage.GetPassageList)</span><br><span class="line">passageRouter.POST(&quot;add&quot;, passage.AddPassage)</span><br><span class="line"></span><br><span class="line">return router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里除了将路由独立出来，还增加了中间件和路由分组</p><p>此时<code>cat main.go</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;myapp/router&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">apiRouter := router.Router()</span><br><span class="line">apiRouter.Run(&quot;:9000&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到main.go文件的内容是不是少多了，仅仅引入router包，启动路由</p><p>router.Group 会将路由分成组，访问路由为 <code>/user/list</code>  <code>user/detail/:id</code></p><p><em>注意</em> gin.New() 和gin.Default() 的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gin.New() 仅仅创建一个路由，并不会包含Logger()和gin.Recovery()中间件，</span><br><span class="line">gin.Default()  创建的路由会默认添加 Logger() 和Recovery() 中间件</span><br><span class="line">所以如果你需要自己引入日志中间件或者恢复的中间件，可以使用gin.New()</span><br></pre></td></tr></table></figure><p>此时目录结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─controller              控制器</span><br><span class="line">│   |--user               用户相关接口</span><br><span class="line">|     |--user.go</span><br><span class="line">|   |--passage            文章相关接口</span><br><span class="line">|     |--passage.go</span><br><span class="line">|--router                 路由文件</span><br><span class="line">|   |--router.go  </span><br><span class="line">|—go.mod                  mod管理器</span><br><span class="line">|—go.sum                  自动生成记录包的版本</span><br><span class="line">|—main.go                 main包，入口文件</span><br></pre></td></tr></table></figure><h2 id="四、引入中间件和其他工具函数"><a href="#四、引入中间件和其他工具函数" class="headerlink" title="四、引入中间件和其他工具函数"></a>四、引入中间件和其他工具函数</h2><p>新建<code>middleware/cors.go</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package middleware</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//Cors 跨域中间件</span><br><span class="line">func Cors() gin.HandlerFunc &#123;</span><br><span class="line">return func(c *gin.Context) &#123;</span><br><span class="line">method := c.Request.Method</span><br><span class="line">c.Header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)</span><br><span class="line">c.Header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, Authorization, Content-Type,remote_user,X-Requested-With,*&quot;)</span><br><span class="line">c.Header(&quot;Access-Control-Allow-Headers&quot;, &quot;Content-Type, remote_user&quot;)</span><br><span class="line">c.Header(&quot;Access-Control-Allow-Methods&quot;, &quot;POST,OPTIONS, GET,PUT&quot;)</span><br><span class="line">c.Header(&quot;Access-Control-Expose-Headers&quot;, &quot;Accept , Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type&quot;)</span><br><span class="line">c.Header(&quot;Access-Control-Allow-Credentials&quot;, &quot;True&quot;)</span><br><span class="line">c.Header(&quot;Content-Type&quot;, &quot;application/json; charset=utf-8&quot;)</span><br><span class="line">if method == &quot;OPTIONS&quot; &#123;</span><br><span class="line">c.AbortWithStatus(204)</span><br><span class="line">c.AbortWithStatus(http.StatusNoContent)</span><br><span class="line">&#125;</span><br><span class="line">submitUser := c.Request.Header.Get(&quot;remote_user&quot;)</span><br><span class="line">c.Set(&quot;submitUser&quot;, submitUser)</span><br><span class="line">c.Next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>cat router.go</code> Router() 中新增 <code>router.Use(middleware.Cors())</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//Router 路由</span><br><span class="line">func Router() *gin.Engine &#123;</span><br><span class="line">router := gin.New()</span><br><span class="line">// 使用中间件</span><br><span class="line">// 使用Logger中间件</span><br><span class="line">router.Use(gin.Logger())</span><br><span class="line">// 使用Recovery中间件</span><br><span class="line">router.Use(gin.Recovery())</span><br><span class="line"></span><br><span class="line">router.Use(middleware.Cors())  // 将会对所有的路由生效</span><br><span class="line"></span><br><span class="line">userRouter := router.Group(&quot;/user&quot;)</span><br><span class="line">userRouter.GET(&quot;list&quot;, user.GetUserList)</span><br><span class="line">userRouter.GET(&quot;detail/:id&quot;, user.GetDetail)</span><br><span class="line"></span><br><span class="line">passageRouter := router.Group(&quot;/passage&quot;)</span><br><span class="line">passageRouter.GET(&quot;list&quot;, passage.GetPassageList)</span><br><span class="line">passageRouter.POST(&quot;add&quot;, passage.AddPassage)</span><br><span class="line"></span><br><span class="line">return router</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├─controller              控制器</span><br><span class="line">│   |--user               用户相关接口</span><br><span class="line">|     |--user.go</span><br><span class="line">|   |--passage            文章相关接口</span><br><span class="line">|     |--passage.go</span><br><span class="line">|--router                 路由文件</span><br><span class="line">|   |--router.go  </span><br><span class="line">|--middleware             中间件</span><br><span class="line">|   |--cors.go          </span><br><span class="line">|--common                 公用的函数</span><br><span class="line">|   |--utils.go</span><br><span class="line">|—go.mod                  mod管理器</span><br><span class="line">|—go.sum                  自动生成记录包的版本</span><br><span class="line">|—main.go                 main包，入口文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang mysql gorm swagger docker shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx日志</title>
      <link href="/lpf.github.io/2020/04/25/nginx%E6%97%A5%E5%BF%97/"/>
      <url>/lpf.github.io/2020/04/25/nginx%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h2 id="access-log"><a href="#access-log" class="headerlink" title="access_log"></a>access_log</h2><p>access_log,nginx可以记录访问日志，通过日志可以查看用户访问的哪些页面比较平凡，哪些服务比较高频的调用，下面是nginx日志的语法</p><table><thead><tr><th align="left">Syntax:</th><th>access_log  <em>path</em> [<em>format</em> [buffer=<em>size</em>] [gzip[=<em>level</em>]] [flush=<em>time</em>] [if=<em>condition</em>]];``<strong>access_log</strong> off;</th></tr></thead><tbody><tr><td align="left">Default:</td><td><code>access_log logs/access.log combined;</code></td></tr><tr><td align="left">Context:</td><td><code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code>, <code>limit_except</code></td></tr></tbody></table><p>nginx.conf,access_log具体用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">include           mime.types;</span><br><span class="line">default_type      application/octet-stream;</span><br><span class="line">log_format main   &apos;$host  $remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                    &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_uri&quot;&apos;;</span><br><span class="line">  access_log        logs/access.log   main;</span><br><span class="line">  sendfile          on;</span><br><span class="line">  server &#123;</span><br><span class="line">  listen          80;</span><br><span class="line">  server_name     localhost;</span><br><span class="line">  location  / &#123;</span><br><span class="line">  index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="log-format"><a href="#log-format" class="headerlink" title="log_format"></a>log_format</h2><p>log_format  指令指定nginx日志的输出格式， 比如上面nginx.conf 文件，log_format指令声明了main格式的(默认格式combined)，后面定义了具体的格式，当我们请求nginx，会输出如下的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">113.31.124.153  115.172.233.107 - - [25/Apr/2020:08:27:59 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.04044.122 Safari/537.36&quot; &quot;-&quot; &quot;/index.html&quot;</span><br></pre></td></tr></table></figure><p>对应下面的变量, 没有用 <code>-</code>表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;$host  $remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">&apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">&apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_uri&quot;&apos;;</span><br></pre></td></tr></table></figure><p>对应变量的含义</p><ul><li>$host   访问的域名</li><li>$remote_addr  访问的客户端ip</li><li>$remote_user  用户名</li><li>$time_local   请求时间和时区</li><li>$request   请求的http信息</li><li>$status  返回状态码</li><li>$body_bytes_send  服务端返回给客户端的body信息</li><li>$http-referer  请求访问来源，根据该参数设置反盗链</li><li>$http_user_agent  客户端的访问信息</li><li>$http_x_forwarded_for  记录请求过程中的ip，再经过反向代理时，可以追踪访问的ip</li><li>$request_uri   记录请求的路由</li></ul><h2 id="日志缓存和压缩"><a href="#日志缓存和压缩" class="headerlink" title="日志缓存和压缩"></a>日志缓存和压缩</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log  main  buffer=256k gzip flush=5;</span><br></pre></td></tr></table></figure><p>access_log  后面可以增加参数</p><p>buffer 代表在服务器内存中开启一块内存，大小这里设置为256k, nginx会先缓存日志到内存中，日志大小等256k，会写入磁盘，用来减少服务器的写入操作，提高服务器的性能，但日志将不饿能实时的看到。</p><p>gzip 代表输入的日志压缩等级，1-9代表压缩等级越来越高，写入速度越来越慢。默认值为1</p><p>flush  代表定时刷新内存中缓存的日志，写到磁盘中（不管buffer缓存的日志是否达到内存设置的上限），单位是秒。</p><h2 id="error-log"><a href="#error-log" class="headerlink" title="error_log"></a>error_log</h2><p>语法：error_log   path  level;</p><p>作用域： main http server location</p><p>示例：error_log /logs/error_log.log error;</p><p>错误日志在不同作用域中的默认级别是不同的，main: error;  http: crit;  server: crit;</p><p>error_log 的错误级别有： debug|info|notice|warn|error|crit|alert|emerg, 从左到右级别越高，记录的错误越严重。</p><p>该指令在一个模块中同时只能出现一次，多次报错，在不同模块中，子模块会覆盖父模块的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_log   /var/log/nginx/error_log  crit;</span><br></pre></td></tr></table></figure><h2 id="日志分割"><a href="#日志分割" class="headerlink" title="日志分割"></a>日志分割</h2><p>split_log.sh  脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">base_path=<span class="string">'/usr/local/nginx/logs'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$base_path</span></span><br><span class="line"></span><br><span class="line">day=$(date +%Y%m%d)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$day</span></span><br><span class="line"></span><br><span class="line">mv <span class="variable">$base_path</span>/access.log <span class="variable">$base_path</span>/access_log_<span class="variable">$day</span>.<span class="built_in">log</span></span><br><span class="line">PID=<span class="string">'/usr/local/nginx/logs/nginx.pid'</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 `cat <span class="variable">$&#123;PID&#125;</span>`</span><br></pre></td></tr></table></figure><p>给执行权限</p><p><code>chmod +x split_log.sh</code></p><p>加入定时脚本，一天切割一次</p><p><code>crontab -e</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00 03 * * * /usr/local/nginx/logs/split_log.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx命令行</title>
      <link href="/lpf.github.io/2020/04/22/nginx%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/lpf.github.io/2020/04/22/nginx%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>nginx 主要通过发射信号来控制进程，了解这些命令可以帮助我们更好的使用nginx</p><p>下面是nginx的命令思维导图</p><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fnginx%E5%91%BD%E4%BB%A4%E8%A1%8C.png" alt="nginx命令行"></p><h2 id="一、nginx命令行"><a href="#一、nginx命令行" class="headerlink" title="一、nginx命令行"></a>一、nginx命令行</h2><p>nginx 使用信号控制进程，通过nginx命令我们可以实现各种操作</p><p><code>nginx -s  stop</code>  直接停止nginx</p><p><code>nginx -s quit</code> 优雅停止nginx(nginx会在所有请求执行完毕，依次关闭进程，最后退出)</p><p><code>nginx -s reload</code> 重新载入配置，平滑重启nginx, 新的请求会走新的配置，老的请求处理完毕后关闭nginx进程。</p><p><code>nginx -s reopen</code> 重新打开日志文件  适用于切割nginx日志操作</p><p><code>nginx -t</code>  检查配置文件语法是否正确，-T  同时打印出配置文件，后面跟文件路径，可以检查某个文件</p><p><code>nginx -h</code>  显示nginx的可以执行的命令</p><p><code>nginx -v</code>  查看nginx版本  -V 通知显示nginx的安装信息和安装的模块。</p><p><code>nginx -c</code>  &lt;配置文件目录&gt;  来启动非默认的配置</p><p><code>nginx -p</code>  &lt;目录&gt;  来指定nginx的安装目录 </p><p><code>nginx -g</code>  来临时指定一些全局配置项</p><p><code>nginx -g</code>  “pid /var/nginx/test.pid;”   意味着把pid写到另一个文件中，-g指定的不能与默认冲突，另外以-g启动的ngix在停止事也需要加上-g</p><p><code>nginx -g</code>  “pid /var/nginx/test.pid;” -s stop.  如果不加-g 就找不到pid文件了</p><h2 id="二、其他命令使用"><a href="#二、其他命令使用" class="headerlink" title="二、其他命令使用"></a>二、其他命令使用</h2><p>1、使用系统命令来启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx  或  service nginx start </span><br><span class="line"></span><br><span class="line">systemctl status nginx 或  service nginx status</span><br><span class="line"></span><br><span class="line">systemctl stop nginx 或 service nginx stop</span><br></pre></td></tr></table></figure><p>2、使用kill 启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -HUP  pid  pid是进程标识，使用该命令发起一个挂起信号，服务器进程会进行复位操作，重新加载配置文件。</span><br></pre></td></tr></table></figure><ul><li>TERM, INT  快递关闭</li><li>QUIT   从容关闭</li><li>HUP   平滑重启，重新加载配置文件</li><li>USER1  重新打开日志文件</li><li>USER2  平滑升级可执行程序</li><li>WINCH  从容关闭工作进程</li></ul><h2 id="三、二者区别"><a href="#三、二者区别" class="headerlink" title="三、二者区别"></a>三、二者区别</h2><p>1、systemctl 或 service 启动nginx, 会关掉nginx并重新启动nginx进程id</p><p>2、<code>nginx -s reload</code> 或 <code>kill -HUP pid</code>  必须在nginx 启动后使用</p><p>3、<code>nginx -s reload</code>  和 <code>kill -HUP pid</code> 会保留旧的请求，直到连接全部结束后退出，新的请求通过新的配置启动进程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过docker使用nginx</title>
      <link href="/lpf.github.io/2020/04/21/%E9%80%9A%E8%BF%87docker%E4%BD%BF%E7%94%A8nginx/"/>
      <url>/lpf.github.io/2020/04/21/%E9%80%9A%E8%BF%87docker%E4%BD%BF%E7%94%A8nginx/</url>
      
        <content type="html"><![CDATA[<p>工作中，我们常常使用docker部署服务，这样的话，如果将nginx打包成镜像，改动起来不太方便，日志查询也很麻烦，所以我们可以将nginx和日志挂载在容器外。</p><p>服务器选择ucloud，购买请<a href="https://ucloud.cn" target="_blank" rel="noopener">点击</a></p><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><p>相关技术：docker、nginx</p><p>docker仓库：<a href="https://hub.docker.com/_/nginx" target="_blank" rel="noopener">https://hub.docker.com/_/nginx</a></p><p>拉取不同版本的镜像：<a href="https://hub.docker.com/_/nginx?tab=tags" target="_blank" rel="noopener">https://hub.docker.com/_/nginx?tab=tags</a></p><h2 id="二、拉取镜像并启动"><a href="#二、拉取镜像并启动" class="headerlink" title="二、拉取镜像并启动"></a>二、拉取镜像并启动</h2><h3 id="启动一个nginx容器"><a href="#启动一个nginx容器" class="headerlink" title="启动一个nginx容器"></a>启动一个nginx容器</h3><blockquote><p>注意：使用端口一定要保证端口的防火墙打开</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-nginx -d -p 8002:80 nginx</span><br></pre></td></tr></table></figure><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fdocker%E5%90%AF%E5%8A%A8nginx.png" alt="docker启动nginx容器"></p><p>我们可以看到一行命令就可以启动nginx</p><p>接着我们执行命令<code>docker exec -it some-nginx bash</code> 就可以进入容器操作nginx的配置，从而使用它。</p><h2 id="三、挂载nginx配置和日志"><a href="#三、挂载nginx配置和日志" class="headerlink" title="三、挂载nginx配置和日志"></a>三、挂载nginx配置和日志</h2><p>上面使用docker修改配置和查看日志不方便，所以我们部署一个docker，将nginx的配置和日志放在宿主机上</p><p>1、在宿主机 <code>/data/web</code> 新建目录</p><p>web<br>├── logs<br>│   ├── access.log<br>│   └── error.log<br>├── nginx<br>│   └── nginx.conf<br>└── testWeb<br>    └── index.html</p><p><strong>nginx.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen  80;</span><br><span class="line">   server_name  localhost;</span><br><span class="line">   root    /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">     index  index.html;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.html</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is testWeb index.html;</span><br></pre></td></tr></table></figure><p>2、启动docker容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test-nginx -d -p 8003:80 -v /data/web/logs:/var/log/nginx -v /data/web/nginx:/etc/nginx/conf.d -v /data/web/testWeb:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p>访问：<code>curl http://localhost:8003</code>，返回index.html内容</p><p>3、修改index.html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is testWeb index.html; this file is change;</span><br></pre></td></tr></table></figure><p>访问：<code>curl  http://localhost:8003</code>   返回修改后的内容，查看access.log  发现日志正常打印。</p><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fnginx%E8%AE%BF%E9%97%AE%E6%88%AA%E5%9B%BE.png" alt="nginx访问"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx源码编译</title>
      <link href="/lpf.github.io/2020/04/21/nginx%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
      <url>/lpf.github.io/2020/04/21/nginx%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>nginx源码编译，通常会出现很多小问题，所以对nginx要求不高，配置比较简单，可以选择工具安装.</p><p>这里由centos为例用源码进行安装</p><blockquote><p>服务器选择ucloud，购买请<a href="https://ucloud.cn" target="_blank" rel="noopener">点击</a></p></blockquote><p>nginx是由一个个模块组成的，有一些自带的模块和大量的第三方模块，也可以自行开发第三方模块。</p><h2 id="一、前置工作"><a href="#一、前置工作" class="headerlink" title="一、前置工作"></a>一、前置工作</h2><p>安装一些nginx依赖的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc //安装GCC</span><br><span class="line"></span><br><span class="line">...安装过程省略</span><br><span class="line">yum install -y gcc-c++ //安装C++库用来编译c++</span><br><span class="line"></span><br><span class="line">...安装过程省略</span><br><span class="line">yum install -y pcre pcre-devel //安装pcre库</span><br><span class="line"></span><br><span class="line">...安装过程省略</span><br><span class="line">yum install -y zlib zlib-devel //安装lib库</span><br><span class="line"></span><br><span class="line">...安装过程省略</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line">...安装过程省略</span><br></pre></td></tr></table></figure><h2 id="二、下载源码"><a href="#二、下载源码" class="headerlink" title="二、下载源码"></a>二、下载源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首先创建/var/nginx目录，可以自定义</span><br><span class="line">cd /var/nginx  </span><br><span class="line"></span><br><span class="line">源码download  #http://nginx.org/download </span><br><span class="line">wget http://nginx.org/download/nginx-1.9.10.tar.gz</span><br></pre></td></tr></table></figure><h3 id="nginx源码目录"><a href="#nginx源码目录" class="headerlink" title="nginx源码目录"></a>nginx源码目录</h3><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fnginx%E6%BA%90%E7%A0%81.png" alt="nginx源码目录"></p><ul><li>auto：一些自动编译的脚本，配合configure使用</li><li>CHANGES：版本变化</li><li>CHANGES.ru：俄罗斯语言的版本变化</li><li>conf：nginx配置文件</li><li>configure：nginx安装编译文件</li><li>contrib 存放其他机构或组织贡献的代码</li><li>html：nginx配置root默认模块</li><li>LICENSE：许可文件</li><li>man：通过<code>man ./nginx.8</code>查看，nginx的帮助手册</li><li>README：说明文档地址</li><li>src：nginx主要的源码分布</li></ul><h3 id="nginx安装指令"><a href="#nginx安装指令" class="headerlink" title="nginx安装指令"></a>nginx安装指令</h3><p>当前目录<code>/var/nginx/nginx-1.9.10</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --help   查看安装的一些参数</span><br></pre></td></tr></table></figure><ul><li>–prefix=PATH  设置nginx的安装路径 </li><li>–sbin-path=PATH 设置环境变量的路径</li><li>–with-http_ssl_module 等是可以安装的模块  </li><li>–without-http_charset_module  等是nginx自带的模块，加上该参数可以卸载</li><li>–add-module=PATH  添加第三方模块</li></ul><h2 id="三、安装步骤"><a href="#三、安装步骤" class="headerlink" title="三、安装步骤"></a>三、安装步骤</h2><p>当前目录<code>/var/nginx/nginx-1.9.10</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 执行命令，配置不同的参数，具体参数见上面安装指令</span><br><span class="line">./configure --prefix=/usr/local/nginx  </span><br><span class="line"></span><br><span class="line"># 编译</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># 安装完成后(nginx在/usr/local/nginx中)</span><br><span class="line">whereis nginx</span><br><span class="line"></span><br><span class="line"># nginx可执行文件在/usr/local/nginx/sbin/nginx  将nginx添加环境变量(软连接方式)</span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h2 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a>四、常见问题</h2><h3 id="1-安装报错"><a href="#1-安装报错" class="headerlink" title="(1) 安装报错"></a>(1) 安装报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">checking for struct tm.tm_gmtoff ... found</span><br><span class="line">checking for struct dirent.d_namlen ... not found</span><br><span class="line">checking for struct dirent.d_type ... found</span><br><span class="line">checking for sysconf(_SC_NPROCESSORS_ONLN) ... found</span><br><span class="line">checking for openat(), fstatat() ... found</span><br><span class="line">checking for getaddrinfo() ... found</span><br><span class="line">checking for PCRE library ... not found</span><br><span class="line">checking for PCRE library in /usr/local/ ... not found</span><br><span class="line">checking for PCRE library in /usr/include/pcre/ ... not found</span><br><span class="line">checking for PCRE library in /usr/pkg/ ... not found</span><br><span class="line">checking for PCRE library in /opt/local/ ... not found</span><br><span class="line"></span><br><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either disable the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure><p>解决办法</p><p><code>yum install pcre-devel</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./libtool: line 990: g++: command not found</span><br></pre></td></tr></table></figure><p>解决办法</p><p><code>yum -y install gcc+ gcc-c++</code></p><h3 id="2-nginx启动报错"><a href="#2-nginx启动报错" class="headerlink" title="(2) nginx启动报错"></a>(2) nginx启动报错</h3><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fnginx%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99.png" alt="启动报错"></p><p>Starting nginx (via systemctl):  Job for nginx.service failed because a configured resource limit was exceeded. See “systemctl status nginx.service” and “journalctl -xe” for details.</p><p>Failed to start SYSV: Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server.</p><p>解决办法：</p><p><code>netstat -ntlp</code> 查看在运行的nginx进程</p><p><code>kill -9  pid</code> 杀死正在运行的nginx进程</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx安装</title>
      <link href="/lpf.github.io/2020/04/19/nginx%E5%AE%89%E8%A3%85/"/>
      <url>/lpf.github.io/2020/04/19/nginx%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>nginx 是一款高并发的轻量级web代理服务器，它可以运行在Linux,Windows,Mac OS等操作系统上。</p><h2 id="一、安装在linux"><a href="#一、安装在linux" class="headerlink" title="一、安装在linux"></a>一、安装在linux</h2><h3 id="（1）CentOS-安装-yum"><a href="#（1）CentOS-安装-yum" class="headerlink" title="（1）CentOS 安装(yum)"></a>（1）CentOS 安装(yum)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y  // 安装nginx</span><br><span class="line">yum remove nginx   // 卸载nginx</span><br></pre></td></tr></table></figure><p>设置nginx开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl  enable  nginx.service</span><br><span class="line">systemctl  restart  nginx.service</span><br></pre></td></tr></table></figure><p> 设置开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p> 注：centOS  一般默认都是安装了yum，运行yum –version 查看nginx,如果没有安装，需要去安装一下</p><h3 id="（2）utuntu-安装（apt-get）"><a href="#（2）utuntu-安装（apt-get）" class="headerlink" title="（2）utuntu 安装（apt-get）"></a>（2）utuntu 安装（apt-get）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h2 id="二、安装在window"><a href="#二、安装在window" class="headerlink" title="二、安装在window"></a>二、安装在window</h2><p>（1）下载安装包 <a href="http://nginx.org/download/（zip安装包为window安装包）" target="_blank" rel="noopener">http://nginx.org/download/（zip安装包为window安装包）</a></p><p>（2）解压，找到exe文件<img src="C:%5CUsers%5Cuser%5CDesktop%5C%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%5Cnginx-win.png" alt="nginx-win"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conf   nginx 配置文件</span><br><span class="line"></span><br><span class="line">html  nginx默认访问的html文件</span><br><span class="line"></span><br><span class="line">logs  日志文件（错误日志，访问日志）</span><br></pre></td></tr></table></figure><p>（3）cmd  nginx当前所在的目录</p><p>相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\user\Downloads\nginx-1.16.1</span><br><span class="line"># 查看版本</span><br><span class="line">nginx.exe -v</span><br><span class="line"># 启动</span><br><span class="line">start nginx 或  nginx.exe</span><br><span class="line"># 打开浏览器，输入http://localhost</span><br><span class="line"># 停止</span><br><span class="line">nginx.exe -s stop  或  nginx.exe -s quit</span><br><span class="line"># 重启</span><br><span class="line">nginx.exe -s reload</span><br><span class="line"># 重新打开日志文件</span><br><span class="line">nginx.exe -s reopen</span><br></pre></td></tr></table></figure><p>注：nginx在win性能较差，所以win仅仅用来体验学习就好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客</title>
      <link href="/lpf.github.io/2020/04/19/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/lpf.github.io/2020/04/19/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>从零开始搭建hexo,这是入门篇，主要介绍下hexo的初始化项目，之后慢慢记录hexo的进阶。</p><h2 id="一、初始化项目"><a href="#一、初始化项目" class="headerlink" title="一、初始化项目"></a>一、初始化项目</h2><p>安装node</p><p><code>node -v</code></p><p>安装hexo</p><p><code>npm install hexo -g</code></p><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo serve  //运行</span><br></pre></td></tr></table></figure><p>其他指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 生成新的文章</span><br><span class="line">hexo new &quot;new passage&quot;</span><br><span class="line">// 生成html文件</span><br><span class="line">hexo generate</span><br><span class="line">// 部署远程服务器</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="二、部署github"><a href="#二、部署github" class="headerlink" title="二、部署github"></a>二、部署github</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git -S</span><br><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>_config.yml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;你的仓库地址&gt; # https://github.com/TJ-XiaJiaHao/TJ-XiaJiaHao.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>访问站点<br>github pages 设置</p><p><a href="https://richlpf.github.io/lpf.github.io/index.html" target="_blank" rel="noopener">https://richlpf.github.io/lpf.github.io/index.html</a><br>注意：<br>1、后面要加上index.html,访问首页<br>2、可以拉取代码，配置访问二级目录</p><h2 id="三、安装问题"><a href="#三、安装问题" class="headerlink" title="三、安装问题"></a>三、安装问题</h2><p>静态资源无法加载问题</p><p><a href="https://blog.csdn.net/weixin_44474742/article/details/97271608" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44474742/article/details/97271608</a></p><p>hexo deploy 上传超时 问题</p><p>git config –global credential.helper store</p><h2 id="四、插件系列"><a href="#四、插件系列" class="headerlink" title="四、插件系列"></a>四、插件系列</h2><p>package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.9.0&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^2.1.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-feed&quot;: &quot;^2.2.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-json-content&quot;: &quot;2.2.0&quot;,</span><br><span class="line">    &quot;hexo-generator-search&quot;: &quot;^2.4.0&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-jade&quot;: &quot;^0.3.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-wordcount&quot;: &quot;^6.0.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插入音乐或视频</p></blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485106&amp;idx=3&amp;sn=50a8681007d7b82a29c92e70110fff1d&amp;chksm=fcf08a8dcb87039b272837b9db33f54db6bed8f3401f7d65f6caf9cec28edb1119fdfee82d41&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485106&amp;idx=3&amp;sn=50a8681007d7b82a29c92e70110fff1d&amp;chksm=fcf08a8dcb87039b272837b9db33f54db6bed8f3401f7d65f6caf9cec28edb1119fdfee82d41&amp;scene=21#wechat_redirect</a></p><blockquote><p>搜索功能</p></blockquote><blockquote><p>自定义404页面</p></blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485262&amp;idx=3&amp;sn=3e2aff5d7fb4979ca70d275bae48525f&amp;chksm=fcf08b71cb870267c972b11b1e5f0c345af39170c756de170adde8e70532360a68debcb0b3c4&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485262&amp;idx=3&amp;sn=3e2aff5d7fb4979ca70d275bae48525f&amp;chksm=fcf08b71cb870267c972b11b1e5f0c345af39170c756de170adde8e70532360a68debcb0b3c4&amp;scene=21#wechat_redirect</a></p><blockquote><p>百度seo</p></blockquote><p>yarn add hexo-baidu-url-push</p><p><a href="https://www.jianshu.com/p/f37452d4978e" target="_blank" rel="noopener">https://www.jianshu.com/p/f37452d4978e</a></p><blockquote><p>文章字数，阅读时长统计</p></blockquote><p>hexo-wordcount</p><blockquote><p>评论功能</p></blockquote><p>leancloud-storage –save</p><blockquote><p>评论提醒</p></blockquote><p>gitalk 评论系统</p><p><a href="https://blog.csdn.net/qq_36537546/article/details/90730412" target="_blank" rel="noopener">https://blog.csdn.net/qq_36537546/article/details/90730412</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongo备份数据</title>
      <link href="/lpf.github.io/2019/10/23/mongo%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/"/>
      <url>/lpf.github.io/2019/10/23/mongo%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>mongo数据库的备份是必须要做的，这里记录下自己备份数据的脚本</p><h2 id="mongo备份脚本"><a href="#mongo备份脚本" class="headerlink" title="mongo备份脚本"></a>mongo备份脚本</h2><p><code>cat /data/backdb/back_up.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">## declare an array variable</span><br><span class="line">declare -a db_arr=(</span><br><span class="line">&quot;testA&quot;</span><br><span class="line">&quot;testB&quot;</span><br><span class="line">)</span><br><span class="line">db_bk=/data/backdb/</span><br><span class="line"></span><br><span class="line">## now loop through the above array</span><br><span class="line">for i in &quot;$&#123;db_arr[@]&#125;&quot;</span><br><span class="line">do</span><br><span class="line">   echo &quot;start to dump &quot; $i</span><br><span class="line">   mongodump -h 192.168.0.1:20000 -d $i -o $db_bk</span><br><span class="line">   echo &quot;end&quot;</span><br><span class="line">   # or do whatever with individual element of the array</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./backup.sh</span><br><span class="line">crontab -l</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">40 22 * * * /data/lpf/test/backup.sh  //每天22点40执行脚本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql备份数据</title>
      <link href="/lpf.github.io/2019/10/23/mysql%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/"/>
      <url>/lpf.github.io/2019/10/23/mysql%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>mysql数据库的备份是必须要做的，这里记录下自己备份数据的脚本</p><h2 id="mysql数据库备份"><a href="#mysql数据库备份" class="headerlink" title="mysql数据库备份"></a>mysql数据库备份</h2><p>cat /data/db/backup.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">db_arr=(</span><br><span class="line">    &quot;web&quot;</span><br><span class="line">    &quot;test&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for i in &quot;$&#123;db_arr[@]&#125;&quot;</span><br><span class="line">do</span><br><span class="line">    echo &quot;start to dump&quot; $i</span><br><span class="line">    docker exec -it docker-mysql[docker_container_id/docker_name] mysqldump -h 120.132.26.176 -uroot -p[password] --databases web &gt; /data/backdb/`date &quot;+%Y%m%d&quot;`web.sql</span><br><span class="line">    echo &quot;end to dump $&#123;db_arr[$i]&#125;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="定时脚本"><a href="#定时脚本" class="headerlink" title="定时脚本"></a>定时脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /data/db/backup.sh</span><br><span class="line">crontab -l</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">40 22 * * * /data/db/backup.sh  //每天22点40执行脚本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
