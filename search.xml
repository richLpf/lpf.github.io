<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx命令行</title>
      <link href="/lpf.github.io/2020/04/22/nginx%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/lpf.github.io/2020/04/22/nginx%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>nginx 主要通过发射信号来控制进程，了解这些命令可以帮助我们更好的使用nginx</p><p>下面是nginx的命令思维导图</p><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fnginx%E5%91%BD%E4%BB%A4%E8%A1%8C.png" alt="nginx命令行"></p><h2 id="一、nginx命令行"><a href="#一、nginx命令行" class="headerlink" title="一、nginx命令行"></a>一、nginx命令行</h2><p>nginx 使用信号控制进程，通过nginx命令我们可以实现各种操作</p><p><code>nginx -s  stop</code>  直接停止nginx</p><p><code>nginx -s quit</code> 优雅停止nginx(nginx会在所有请求执行完毕，依次关闭进程，最后退出)</p><p><code>nginx -s reload</code> 重新载入配置，平滑重启nginx, 新的请求会走新的配置，老的请求处理完毕后关闭nginx进程。</p><p><code>nginx -s reopen</code> 重新打开日志文件  适用于切割nginx日志操作</p><p><code>nginx -t</code>  检查配置文件语法是否正确，-T  同时打印出配置文件，后面跟文件路径，可以检查某个文件</p><p><code>nginx -h</code>  显示nginx的可以执行的命令</p><p><code>nginx -v</code>  查看nginx版本  -V 通知显示nginx的安装信息和安装的模块。</p><p><code>nginx -c</code>  &lt;配置文件目录&gt;  来启动非默认的配置</p><p><code>nginx -p</code>  &lt;目录&gt;  来指定nginx的安装目录 </p><p><code>nginx -g</code>  来临时指定一些全局配置项</p><p><code>nginx -g</code>  “pid /var/nginx/test.pid;”   意味着把pid写到另一个文件中，-g指定的不能与默认冲突，另外以-g启动的ngix在停止事也需要加上-g</p><p><code>nginx -g</code>  “pid /var/nginx/test.pid;” -s stop.  如果不加-g 就找不到pid文件了</p><h2 id="二、其他命令使用"><a href="#二、其他命令使用" class="headerlink" title="二、其他命令使用"></a>二、其他命令使用</h2><p>1、使用系统命令来启动nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx  或  service nginx start </span><br><span class="line"></span><br><span class="line">systemctl status nginx 或  service nginx status</span><br><span class="line"></span><br><span class="line">systemctl stop nginx 或 service nginx stop</span><br></pre></td></tr></table></figure><p>2、使用kill 启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -HUP  pid  pid是进程标识，使用该命令发起一个挂起信号，服务器进程会进行复位操作，重新加载配置文件。</span><br></pre></td></tr></table></figure><ul><li>TERM, INT  快递关闭</li><li>QUIT   从容关闭</li><li>HUP   平滑重启，重新加载配置文件</li><li>USER1  重新打开日志文件</li><li>USER2  平滑升级可执行程序</li><li>WINCH  从容关闭工作进程</li></ul><h2 id="三、二者区别"><a href="#三、二者区别" class="headerlink" title="三、二者区别"></a>三、二者区别</h2><p>1、systemctl 或 service 启动nginx, 会关掉nginx并重新启动nginx进程id</p><p>2、<code>nginx -s reload</code> 或 <code>kill -HUP pid</code>  必须在nginx 启动后使用</p><p>3、<code>nginx -s reload</code>  和 <code>kill -HUP pid</code> 会保留旧的请求，直到连接全部结束后退出，新的请求通过新的配置启动进程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过docker使用nginx</title>
      <link href="/lpf.github.io/2020/04/21/%E9%80%9A%E8%BF%87docker%E4%BD%BF%E7%94%A8nginx/"/>
      <url>/lpf.github.io/2020/04/21/%E9%80%9A%E8%BF%87docker%E4%BD%BF%E7%94%A8nginx/</url>
      
        <content type="html"><![CDATA[<p>工作中，我们常常使用docker部署服务，这样的话，如果将nginx打包成镜像，改动起来不太方便，日志查询也很麻烦，所以我们可以将nginx和日志挂载在容器外。</p><p>服务器选择ucloud，购买请<a href="https://ucloud.cn" target="_blank" rel="noopener">点击</a></p><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><p>相关技术：docker、nginx</p><p>docker仓库：<a href="https://hub.docker.com/_/nginx" target="_blank" rel="noopener">https://hub.docker.com/_/nginx</a></p><p>拉取不同版本的镜像：<a href="https://hub.docker.com/_/nginx?tab=tags" target="_blank" rel="noopener">https://hub.docker.com/_/nginx?tab=tags</a></p><h2 id="二、拉取镜像并启动"><a href="#二、拉取镜像并启动" class="headerlink" title="二、拉取镜像并启动"></a>二、拉取镜像并启动</h2><h3 id="启动一个nginx容器"><a href="#启动一个nginx容器" class="headerlink" title="启动一个nginx容器"></a>启动一个nginx容器</h3><blockquote><p>注意：使用端口一定要保证端口的防火墙打开</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-nginx -d -p 8002:80 nginx</span><br></pre></td></tr></table></figure><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fdocker%E5%90%AF%E5%8A%A8nginx.png" alt="docker启动nginx容器"></p><p>我们可以看到一行命令就可以启动nginx</p><p>接着我们执行命令<code>docker exec -it some-nginx bash</code> 就可以进入容器操作nginx的配置，从而使用它。</p><h2 id="三、挂载nginx配置和日志"><a href="#三、挂载nginx配置和日志" class="headerlink" title="三、挂载nginx配置和日志"></a>三、挂载nginx配置和日志</h2><p>上面使用docker修改配置和查看日志不方便，所以我们部署一个docker，将nginx的配置和日志放在宿主机上</p><p>1、在宿主机 <code>/data/web</code> 新建目录</p><p>web<br>├── logs<br>│   ├── access.log<br>│   └── error.log<br>├── nginx<br>│   └── nginx.conf<br>└── testWeb<br>    └── index.html</p><p><strong>nginx.conf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen  80;</span><br><span class="line">   server_name  localhost;</span><br><span class="line">   root    /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">     index  index.html;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.html</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is testWeb index.html;</span><br></pre></td></tr></table></figure><p>2、启动docker容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test-nginx -d -p 8003:80 -v /data/web/logs:/var/log/nginx -v /data/web/nginx:/etc/nginx/conf.d -v /data/web/testWeb:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><p>访问：<code>curl http://localhost:8003</code>，返回index.html内容</p><p>3、修改index.html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is testWeb index.html; this file is change;</span><br></pre></td></tr></table></figure><p>访问：<code>curl  http://localhost:8003</code>   返回修改后的内容，查看access.log  发现日志正常打印。</p><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fnginx%E8%AE%BF%E9%97%AE%E6%88%AA%E5%9B%BE.png" alt="nginx访问"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx源码编译</title>
      <link href="/lpf.github.io/2020/04/21/nginx%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
      <url>/lpf.github.io/2020/04/21/nginx%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>nginx源码编译，通常会出现很多小问题，所以对nginx要求不高，配置比较简单，可以选择工具安装.</p><p>这里由centos为例用源码进行安装</p><blockquote><p>服务器选择ucloud，购买请<a href="https://ucloud.cn" target="_blank" rel="noopener">点击</a></p></blockquote><p>nginx是由一个个模块组成的，有一些自带的模块和大量的第三方模块，也可以自行开发第三方模块。</p><h2 id="一、前置工作"><a href="#一、前置工作" class="headerlink" title="一、前置工作"></a>一、前置工作</h2><p>安装一些nginx依赖的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc //安装GCC</span><br><span class="line"></span><br><span class="line">...安装过程省略</span><br><span class="line">yum install -y gcc-c++ //安装C++库用来编译c++</span><br><span class="line"></span><br><span class="line">...安装过程省略</span><br><span class="line">yum install -y pcre pcre-devel //安装pcre库</span><br><span class="line"></span><br><span class="line">...安装过程省略</span><br><span class="line">yum install -y zlib zlib-devel //安装lib库</span><br><span class="line"></span><br><span class="line">...安装过程省略</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line">...安装过程省略</span><br></pre></td></tr></table></figure><h2 id="二、下载源码"><a href="#二、下载源码" class="headerlink" title="二、下载源码"></a>二、下载源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首先创建/var/nginx目录，可以自定义</span><br><span class="line">cd /var/nginx  </span><br><span class="line"></span><br><span class="line">源码download  #http://nginx.org/download </span><br><span class="line">wget http://nginx.org/download/nginx-1.9.10.tar.gz</span><br></pre></td></tr></table></figure><h3 id="nginx源码目录"><a href="#nginx源码目录" class="headerlink" title="nginx源码目录"></a>nginx源码目录</h3><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fnginx%E6%BA%90%E7%A0%81.png" alt="nginx源码目录"></p><ul><li>auto：一些自动编译的脚本，配合configure使用</li><li>CHANGES：版本变化</li><li>CHANGES.ru：俄罗斯语言的版本变化</li><li>conf：nginx配置文件</li><li>configure：nginx安装编译文件</li><li>contrib 存放其他机构或组织贡献的代码</li><li>html：nginx配置root默认模块</li><li>LICENSE：许可文件</li><li>man：通过<code>man ./nginx.8</code>查看，nginx的帮助手册</li><li>README：说明文档地址</li><li>src：nginx主要的源码分布</li></ul><h3 id="nginx安装指令"><a href="#nginx安装指令" class="headerlink" title="nginx安装指令"></a>nginx安装指令</h3><p>当前目录<code>/var/nginx/nginx-1.9.10</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --help   查看安装的一些参数</span><br></pre></td></tr></table></figure><ul><li>–prefix=PATH  设置nginx的安装路径 </li><li>–sbin-path=PATH 设置环境变量的路径</li><li>–with-http_ssl_module 等是可以安装的模块  </li><li>–without-http_charset_module  等是nginx自带的模块，加上该参数可以卸载</li><li>–add-module=PATH  添加第三方模块</li></ul><h2 id="三、安装步骤"><a href="#三、安装步骤" class="headerlink" title="三、安装步骤"></a>三、安装步骤</h2><p>当前目录<code>/var/nginx/nginx-1.9.10</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 执行命令，配置不同的参数，具体参数见上面安装指令</span><br><span class="line">./configure --prefix=/usr/local/nginx  </span><br><span class="line"></span><br><span class="line"># 编译</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># 安装完成后(nginx在/usr/local/nginx中)</span><br><span class="line">whereis nginx</span><br><span class="line"></span><br><span class="line"># nginx可执行文件在/usr/local/nginx/sbin/nginx  将nginx添加环境变量(软连接方式)</span><br><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h2 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a>四、常见问题</h2><h3 id="1-安装报错"><a href="#1-安装报错" class="headerlink" title="(1) 安装报错"></a>(1) 安装报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">checking for struct tm.tm_gmtoff ... found</span><br><span class="line">checking for struct dirent.d_namlen ... not found</span><br><span class="line">checking for struct dirent.d_type ... found</span><br><span class="line">checking for sysconf(_SC_NPROCESSORS_ONLN) ... found</span><br><span class="line">checking for openat(), fstatat() ... found</span><br><span class="line">checking for getaddrinfo() ... found</span><br><span class="line">checking for PCRE library ... not found</span><br><span class="line">checking for PCRE library in /usr/local/ ... not found</span><br><span class="line">checking for PCRE library in /usr/include/pcre/ ... not found</span><br><span class="line">checking for PCRE library in /usr/pkg/ ... not found</span><br><span class="line">checking for PCRE library in /opt/local/ ... not found</span><br><span class="line"></span><br><span class="line">./configure: error: the HTTP rewrite module requires the PCRE library.</span><br><span class="line">You can either disable the module by using --without-http_rewrite_module</span><br><span class="line">option, or install the PCRE library into the system, or build the PCRE library</span><br><span class="line">statically from the source with nginx by using --with-pcre=&lt;path&gt; option.</span><br></pre></td></tr></table></figure><p>解决办法</p><p><code>yum install pcre-devel</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./libtool: line 990: g++: command not found</span><br></pre></td></tr></table></figure><p>解决办法</p><p><code>yum -y install gcc+ gcc-c++</code></p><h3 id="2-nginx启动报错"><a href="#2-nginx启动报错" class="headerlink" title="(2) nginx启动报错"></a>(2) nginx启动报错</h3><p><img src="http://weblpf.cn-bj.ufileos.com/ufile-log%2Fweblpf%2Fnginx%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99.png" alt="启动报错"></p><p>Starting nginx (via systemctl):  Job for nginx.service failed because a configured resource limit was exceeded. See “systemctl status nginx.service” and “journalctl -xe” for details.</p><p>Failed to start SYSV: Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server.</p><p>解决办法：</p><p><code>netstat -ntlp</code> 查看在运行的nginx进程</p><p><code>kill -9  pid</code> 杀死正在运行的nginx进程</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx安装</title>
      <link href="/lpf.github.io/2020/04/19/nginx%E5%AE%89%E8%A3%85/"/>
      <url>/lpf.github.io/2020/04/19/nginx%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>nginx 是一款高并发的轻量级web代理服务器，它可以运行在Linux,Windows,Mac OS等操作系统上。</p><h2 id="一、安装在linux"><a href="#一、安装在linux" class="headerlink" title="一、安装在linux"></a>一、安装在linux</h2><h3 id="（1）CentOS-安装-yum"><a href="#（1）CentOS-安装-yum" class="headerlink" title="（1）CentOS 安装(yum)"></a>（1）CentOS 安装(yum)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y  // 安装nginx</span><br><span class="line">yum remove nginx   // 卸载nginx</span><br></pre></td></tr></table></figure><p>设置nginx开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl  enable  nginx.service</span><br><span class="line">systemctl  restart  nginx.service</span><br></pre></td></tr></table></figure><p> 设置开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p> 注：centOS  一般默认都是安装了yum，运行yum –version 查看nginx,如果没有安装，需要去安装一下</p><h3 id="（2）utuntu-安装（apt-get）"><a href="#（2）utuntu-安装（apt-get）" class="headerlink" title="（2）utuntu 安装（apt-get）"></a>（2）utuntu 安装（apt-get）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h2 id="二、安装在window"><a href="#二、安装在window" class="headerlink" title="二、安装在window"></a>二、安装在window</h2><p>（1）下载安装包 <a href="http://nginx.org/download/（zip安装包为window安装包）" target="_blank" rel="noopener">http://nginx.org/download/（zip安装包为window安装包）</a></p><p>（2）解压，找到exe文件<img src="C:%5CUsers%5Cuser%5CDesktop%5C%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%5Cnginx-win.png" alt="nginx-win"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conf   nginx 配置文件</span><br><span class="line"></span><br><span class="line">html  nginx默认访问的html文件</span><br><span class="line"></span><br><span class="line">logs  日志文件（错误日志，访问日志）</span><br></pre></td></tr></table></figure><p>（3）cmd  nginx当前所在的目录</p><p>相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Users\user\Downloads\nginx-1.16.1</span><br><span class="line"># 查看版本</span><br><span class="line">nginx.exe -v</span><br><span class="line"># 启动</span><br><span class="line">start nginx 或  nginx.exe</span><br><span class="line"># 打开浏览器，输入http://localhost</span><br><span class="line"># 停止</span><br><span class="line">nginx.exe -s stop  或  nginx.exe -s quit</span><br><span class="line"># 重启</span><br><span class="line">nginx.exe -s reload</span><br><span class="line"># 重新打开日志文件</span><br><span class="line">nginx.exe -s reopen</span><br></pre></td></tr></table></figure><p>注：nginx在win性能较差，所以win仅仅用来体验学习就好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客</title>
      <link href="/lpf.github.io/2020/04/19/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/lpf.github.io/2020/04/19/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>从零开始搭建hexo,这是入门篇，主要介绍下hexo的初始化项目，之后慢慢记录hexo的进阶。</p><h2 id="一、初始化项目"><a href="#一、初始化项目" class="headerlink" title="一、初始化项目"></a>一、初始化项目</h2><p>安装node</p><p><code>node -v</code></p><p>安装hexo</p><p><code>npm install hexo -g</code></p><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo serve  //运行</span><br></pre></td></tr></table></figure><p>其他指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 生成新的文章</span><br><span class="line">hexo new &quot;new passage&quot;</span><br><span class="line">// 生成html文件</span><br><span class="line">hexo generate</span><br><span class="line">// 部署远程服务器</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="二、部署github"><a href="#二、部署github" class="headerlink" title="二、部署github"></a>二、部署github</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git -S</span><br><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>_config.yml配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;你的仓库地址&gt; # https://github.com/TJ-XiaJiaHao/TJ-XiaJiaHao.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>访问站点<br>github pages 设置</p><p><a href="https://richlpf.github.io/lpf.github.io/index.html" target="_blank" rel="noopener">https://richlpf.github.io/lpf.github.io/index.html</a><br>注意：<br>1、后面要加上index.html,访问首页<br>2、可以拉取代码，配置访问二级目录</p><h2 id="三、安装问题"><a href="#三、安装问题" class="headerlink" title="三、安装问题"></a>三、安装问题</h2><p>静态资源无法加载问题</p><p><a href="https://blog.csdn.net/weixin_44474742/article/details/97271608" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44474742/article/details/97271608</a></p><p>hexo deploy 上传超时 问题</p><p>git config –global credential.helper store</p><h2 id="四、插件系列"><a href="#四、插件系列" class="headerlink" title="四、插件系列"></a>四、插件系列</h2><p>package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.9.0&quot;,</span><br><span class="line">    &quot;hexo-deployer-git&quot;: &quot;^2.1.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-feed&quot;: &quot;^2.2.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-json-content&quot;: &quot;2.2.0&quot;,</span><br><span class="line">    &quot;hexo-generator-search&quot;: &quot;^2.4.0&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-jade&quot;: &quot;^0.3.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-wordcount&quot;: &quot;^6.0.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>插入音乐或视频</p></blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485106&amp;idx=3&amp;sn=50a8681007d7b82a29c92e70110fff1d&amp;chksm=fcf08a8dcb87039b272837b9db33f54db6bed8f3401f7d65f6caf9cec28edb1119fdfee82d41&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485106&amp;idx=3&amp;sn=50a8681007d7b82a29c92e70110fff1d&amp;chksm=fcf08a8dcb87039b272837b9db33f54db6bed8f3401f7d65f6caf9cec28edb1119fdfee82d41&amp;scene=21#wechat_redirect</a></p><blockquote><p>搜索功能</p></blockquote><blockquote><p>自定义404页面</p></blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485262&amp;idx=3&amp;sn=3e2aff5d7fb4979ca70d275bae48525f&amp;chksm=fcf08b71cb870267c972b11b1e5f0c345af39170c756de170adde8e70532360a68debcb0b3c4&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU3MDI4NTM5Mg==&amp;mid=2247485262&amp;idx=3&amp;sn=3e2aff5d7fb4979ca70d275bae48525f&amp;chksm=fcf08b71cb870267c972b11b1e5f0c345af39170c756de170adde8e70532360a68debcb0b3c4&amp;scene=21#wechat_redirect</a></p><blockquote><p>百度seo</p></blockquote><p>yarn add hexo-baidu-url-push</p><p><a href="https://www.jianshu.com/p/f37452d4978e" target="_blank" rel="noopener">https://www.jianshu.com/p/f37452d4978e</a></p><blockquote><p>文章字数，阅读时长统计</p></blockquote><p>hexo-wordcount</p><blockquote><p>评论功能</p></blockquote><p>leancloud-storage –save</p><blockquote><p>评论提醒</p></blockquote><p>gitalk 评论系统</p><p><a href="https://blog.csdn.net/qq_36537546/article/details/90730412" target="_blank" rel="noopener">https://blog.csdn.net/qq_36537546/article/details/90730412</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongo备份数据</title>
      <link href="/lpf.github.io/2019/10/23/mongo%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/"/>
      <url>/lpf.github.io/2019/10/23/mongo%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>mongo数据库的备份是必须要做的，这里记录下自己备份数据的脚本</p><h2 id="mongo备份脚本"><a href="#mongo备份脚本" class="headerlink" title="mongo备份脚本"></a>mongo备份脚本</h2><p><code>cat /data/backdb/back_up.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">## declare an array variable</span><br><span class="line">declare -a db_arr=(</span><br><span class="line">&quot;testA&quot;</span><br><span class="line">&quot;testB&quot;</span><br><span class="line">)</span><br><span class="line">db_bk=/data/backdb/</span><br><span class="line"></span><br><span class="line">## now loop through the above array</span><br><span class="line">for i in &quot;$&#123;db_arr[@]&#125;&quot;</span><br><span class="line">do</span><br><span class="line">   echo &quot;start to dump &quot; $i</span><br><span class="line">   mongodump -h 192.168.0.1:20000 -d $i -o $db_bk</span><br><span class="line">   echo &quot;end&quot;</span><br><span class="line">   # or do whatever with individual element of the array</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./backup.sh</span><br><span class="line">crontab -l</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">40 22 * * * /data/lpf/test/backup.sh  //每天22点40执行脚本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql备份数据</title>
      <link href="/lpf.github.io/2019/10/23/mysql%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/"/>
      <url>/lpf.github.io/2019/10/23/mysql%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>mysql数据库的备份是必须要做的，这里记录下自己备份数据的脚本</p><h2 id="mysql数据库备份"><a href="#mysql数据库备份" class="headerlink" title="mysql数据库备份"></a>mysql数据库备份</h2><p>cat /data/db/backup.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">db_arr=(</span><br><span class="line">    &quot;web&quot;</span><br><span class="line">    &quot;test&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">for i in &quot;$&#123;db_arr[@]&#125;&quot;</span><br><span class="line">do</span><br><span class="line">    echo &quot;start to dump&quot; $i</span><br><span class="line">    docker exec -it docker-mysql[docker_container_id/docker_name] mysqldump -h 120.132.26.176 -uroot -p[password] --databases web &gt; /data/backdb/`date &quot;+%Y%m%d&quot;`web.sql</span><br><span class="line">    echo &quot;end to dump $&#123;db_arr[$i]&#125;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="定时脚本"><a href="#定时脚本" class="headerlink" title="定时脚本"></a>定时脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /data/db/backup.sh</span><br><span class="line">crontab -l</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">40 22 * * * /data/db/backup.sh  //每天22点40执行脚本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
